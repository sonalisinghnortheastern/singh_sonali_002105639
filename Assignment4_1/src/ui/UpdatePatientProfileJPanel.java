/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import model.City;
import model.Community;
import model.House;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;

/**
 *
 * @author sonal
 */
public class UpdatePatientProfileJPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdatePatientProfileJPanel
     */
    PatientDirectory patients;
    PersonDirectory persons;
    boolean validationStatus=true;
    public UpdatePatientProfileJPanel(PatientDirectory patients,PersonDirectory persons) {
        initComponents();
        this.patients=patients;
        this.persons=persons;
         initCityCombo();
        visiblity(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtPatientId = new javax.swing.JTextField();
        btnSearchPatient = new javax.swing.JButton();
        txtMiddleName = new javax.swing.JTextField();
        lblPersonalInformation = new javax.swing.JLabel();
        txtLastName = new javax.swing.JTextField();
        btnUpdate = new javax.swing.JButton();
        cmbSalutation = new javax.swing.JComboBox<>();
        lblDateOfBirth = new javax.swing.JLabel();
        lblContactInformation = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        lblPhoneNumber = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtPhoneNumber = new javax.swing.JTextField();
        lblHeight = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        txtHeight = new javax.swing.JTextField();
        lblWeight = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        lblAddressLine1 = new javax.swing.JLabel();
        txtAddressLine1 = new javax.swing.JTextField();
        lblAddressLine2 = new javax.swing.JLabel();
        txtAddressLine2 = new javax.swing.JTextField();
        lblAddressCity = new javax.swing.JLabel();
        cmbCity = new javax.swing.JComboBox<>();
        cmbState = new javax.swing.JComboBox<>();
        cmbCommunity = new javax.swing.JComboBox<>();

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Update Patient");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Please Enter Your Patient Id :");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        txtPatientId.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnSearchPatient.setFont(new java.awt.Font("Arial Black", 1, 10)); // NOI18N
        btnSearchPatient.setText("Search");
        btnSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPatientActionPerformed(evt);
            }
        });

        txtMiddleName.setToolTipText("Please Enter Middle Name if any");

        lblPersonalInformation.setBackground(new java.awt.Color(204, 204, 204));
        lblPersonalInformation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblPersonalInformation.setForeground(new java.awt.Color(102, 0, 51));
        lblPersonalInformation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPersonalInformation.setText("Personal Information");

        txtLastName.setToolTipText("Please Enter las Name if any");

        btnUpdate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        cmbSalutation.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mr.", "Mrs.", "Miss." }));

        lblDateOfBirth.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblDateOfBirth.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDateOfBirth.setText("* Age :");

        lblContactInformation.setBackground(new java.awt.Color(204, 204, 204));
        lblContactInformation.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        lblContactInformation.setForeground(new java.awt.Color(102, 0, 51));
        lblContactInformation.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblContactInformation.setText("Contact Information");

        txtFirstName.setToolTipText("Please Enter your first Name");

        lblPhoneNumber.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblPhoneNumber.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPhoneNumber.setText("* Phone Number : ");

        lblName.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblName.setText("* Name : ");

        lblHeight.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblHeight.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblHeight.setText("* Height");

        txtAge.setToolTipText("Please Enter your first Name");

        txtHeight.setToolTipText("Please Enter your first Name");

        lblWeight.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblWeight.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblWeight.setText("* Weight");

        txtWeight.setToolTipText("Please Enter your first Name");

        lblAddressLine1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblAddressLine1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAddressLine1.setText("* Address Line1:");

        lblAddressLine2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblAddressLine2.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAddressLine2.setText(" Address Line2:");

        lblAddressCity.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblAddressCity.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblAddressCity.setText("* City , State , Community :");

        cmbCity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbCityItemStateChanged(evt);
            }
        });

        cmbState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MA", "AC", "DC", "BC" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(317, 317, 317)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblDateOfBirth)
                                    .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(91, 91, 91)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbSalutation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(44, 44, 44)
                                        .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39)
                                        .addComponent(txtMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39)
                                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblHeight)
                                    .addComponent(lblWeight))
                                .addGap(119, 119, 119)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPhoneNumber)
                            .addComponent(lblAddressLine1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddressLine2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddressCity))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(cmbState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(cmbCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtAddressLine2, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddressLine1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblContactInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblPersonalInformation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(61, 61, 61)
                                .addComponent(btnSearchPatient)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(lblPersonalInformation)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(cmbSalutation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMiddleName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateOfBirth)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHeight)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblWeight)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(lblContactInformation)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddressLine1)
                    .addComponent(txtAddressLine1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddressLine2)
                    .addComponent(txtAddressLine2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddressCity)
                    .addComponent(cmbCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneNumber)
                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(130, 130, 130))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPatientActionPerformed
        if(txtPatientId.getText().trim().isEmpty()|| txtPatientId.getText()==null)
        {
            JOptionPane.showMessageDialog(this,"Please Enter Patient Id");
            return;
        }
        boolean patientAvailable=false;
        for(var person : persons.getPersonDirectory())
        {
            if(person.getPatientId()==Integer.parseInt(txtPatientId.getText()))
            {
                patientAvailable=true;
                visiblity(true);
                loadFilledForm();
            }
        }
        if(!patientAvailable)
        {
            JOptionPane.showMessageDialog(this,"Patient with this id does not exist ."
                + "Please register before taking appointment");
        }
    }//GEN-LAST:event_btnSearchPatientActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed

        try
        {
            validationStatus=NullOrEmptyValidation();
            int index=0;
            if(validationStatus)
            {
                for(Person person : persons.getPersonDirectory())
                {     
                    if(person.getPatientId()==(Integer.parseInt(txtPatientId.getText())))
                    {
                        person.setName(cmbSalutation.getSelectedItem().toString() + " " + txtFirstName.getText() + " " + txtLastName.getText());
                        person.setAge(Integer.parseInt(txtAge.getText()));
                        person.setHeight(Float.parseFloat(txtHeight.getText()));
                        person.setWeight(Float.parseFloat(txtWeight.getText()));
                        person.setPatientId(Integer.parseInt(txtPatientId.getText()));
                        House house=new House();
                        house.setHouseNumber(txtAddressLine1.getText());
                        if(!txtAddressLine2.getText().trim().isEmpty())
                        {
                            house.setStreetName(txtAddressLine2.getText());
                        }
                        Community community=new Community();
                        Map<String,String>communities=new HashMap<>();
                        communities.put(cmbCity.getSelectedItem().toString(),cmbCommunity.getSelectedItem().toString());
                        community.setCommunity(communities);
                        house.setCommunity(community);
                        person.setHouse(house);
                        person.setMobileNumber(Long.parseLong(txtPhoneNumber.getText()));
                        persons.getPersonDirectory().set(index, person);
                    }
                    else{
                        index++;
                    }
                }
                JOptionPane.showMessageDialog(this,"Information Updated Successfully");
            }
            else{
                JOptionPane.showMessageDialog(this,"Field Validation Failed .Please hover over the red fields  to know more.");
                validationStatus=true;
                persons.getPersonDirectory().remove(index);
            }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this,"Information Not Saved");
            validationStatus=true;
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void cmbCityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbCityItemStateChanged
        if (evt.getStateChange() != ItemEvent.SELECTED) {
        initCommunityCombo();
    }
    }//GEN-LAST:event_cmbCityItemStateChanged
    private void visiblity(boolean value) {
            lblPersonalInformation.setVisible(value);
            lblName.setVisible(value);
            cmbSalutation.setVisible(value);
            txtFirstName.setVisible(value);
            txtMiddleName.setVisible(value);
            txtLastName.setVisible(value);
            lblDateOfBirth.setVisible(value);
            txtAge.setVisible(value);   
            lblHeight.setVisible(value);
            txtHeight.setVisible(value);   
            lblWeight.setVisible(value);
            txtWeight.setVisible(value);   
            lblContactInformation.setVisible(value);
            lblPhoneNumber.setVisible(value);  
            txtPhoneNumber.setVisible(value);  
            lblAddressLine1.setVisible(value);  
            txtAddressLine1.setVisible(value);  
            lblAddressLine2.setVisible(value);  
            txtAddressLine2.setVisible(value);  
            lblAddressCity.setVisible(value);
            cmbCity.setVisible(value);
            cmbCommunity.setVisible(value);
            cmbState.setVisible(value);
            btnUpdate.setVisible(value);
        }
    private boolean NullOrEmptyValidation() {
        if(txtFirstName.getText()==null && txtFirstName.getText().trim()=="" )
        {
            txtFirstName.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtFirstName.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }
        else if(txtLastName.getText()==null && txtLastName.getText().trim()=="" )
        {
            txtLastName.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtLastName.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }
        else if(txtAge.getText()==null && txtLastName.getText().trim()=="" )
        {
            txtAge.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtAge.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }
        else if(txtHeight.getText()==null && txtHeight.getText().trim()=="" )
        {
            txtHeight.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtHeight.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }
        else if(txtWeight.getText()==null && txtWeight.getText().trim()=="" )
        {
            txtWeight.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtWeight.setToolTipText("Field Cannot be left empty");
            validationStatus= false;
        }
        else if(txtPhoneNumber.getText()==null && txtPhoneNumber.getText().trim()=="" )
        {
            txtPhoneNumber.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtPhoneNumber.setToolTipText("Field Cannot be left empty");
            validationStatus=false;
        }
        return validationStatus;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearchPatient;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbCity;
    private javax.swing.JComboBox<String> cmbCommunity;
    private javax.swing.JComboBox<String> cmbSalutation;
    private javax.swing.JComboBox<String> cmbState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblAddressCity;
    private javax.swing.JLabel lblAddressLine1;
    private javax.swing.JLabel lblAddressLine2;
    private javax.swing.JLabel lblContactInformation;
    private javax.swing.JLabel lblDateOfBirth;
    private javax.swing.JLabel lblHeight;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPersonalInformation;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblWeight;
    private javax.swing.JTextField txtAddressLine1;
    private javax.swing.JTextField txtAddressLine2;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtMiddleName;
    private javax.swing.JTextField txtPatientId;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables

    private void loadFilledForm() {
       for(var person : persons.getPersonDirectory())
        {
            if(person.getPatientId()==Integer.parseInt(txtPatientId.getText()))
            {
                String [] fullName=person.getName().split(" ");
                cmbSalutation.setSelectedItem(fullName[0]);
                txtFirstName.setText(fullName[1]);
                if(fullName.length==4)
                {
                    txtMiddleName.setText(fullName[2]);
                    txtLastName.setText(fullName[3]);
                }
                else{
                    txtLastName.setText(fullName[2]);
                }
                txtAge.setText(String.valueOf(person.getAge()));
                txtHeight.setText(String.valueOf(person.getHeight()));
                txtWeight.setText(String.valueOf(person.getWeight()));
                txtAddressLine1.setText(person.getHouse().getHouseNumber());
                txtAddressLine2.setText(person.getHouse().getStreetName());
                person.getHouse().getCommunity().getCommunity().entrySet().stream().map(pair -> {
                    cmbCity.setSelectedItem(pair.getKey());
                    return pair;
                }).forEachOrdered(pair -> {
                    cmbCommunity.setSelectedItem(pair.getValue());
                });
                
                txtPhoneNumber.setText(String.valueOf(person.getMobileNumber()));
            }
        }
    }
    private void initCityCombo() {
        cmbCity.removeAllItems();
       int count = 0;
        City[] cities = City.values();
        for (City citie : cities) {
            cmbCity.addItem(cities[count++].toString());
        }
       initCommunityCombo();
    }
    private void initCommunityCombo() {
    cmbCommunity.removeAllItems();
      int count = 0;
      var selectedCity=cmbCity.getSelectedItem().toString();
      City city=City.valueOf(selectedCity);
      Community community=new Community();
      community.setCommunities();
      String[] communities=community.getCommunities().get(city);
        for (String communitie : communities) {
            cmbCommunity.addItem(communities[count++]);
        }
    }
}

