/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Encounter;
import model.EncounterHistory;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.VitalSigns;

/**
 *
 * @author sonal
 */
public class ViewUpcomingHistoryAppointmentsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewUpcomingHistoryAppointmentsJPanel
     */
    PatientDirectory patients;
    PersonDirectory persons;
    public ViewUpcomingHistoryAppointmentsJPanel(PatientDirectory patients,PersonDirectory persons) {
        initComponents();
        this.patients=patients;
        this.persons=persons;
        displayInfo(patients.getPatients());
        jTextArea1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jRegisteredAppointmentTable = new javax.swing.JTable();
        historyButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Appointments");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jRegisteredAppointmentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Id", "Patient Name", "Appointment Date", "Recent VitalSigns", "Test Undertaken Date"
            }
        ));
        jScrollPane1.setViewportView(jRegisteredAppointmentTable);

        historyButton.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        historyButton.setText("View Patient History");
        historyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 853, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(historyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(historyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void historyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyButtonActionPerformed
        jTextArea1.setVisible(true);
        int rowIndex=jRegisteredAppointmentTable.getSelectedRow();
        if(rowIndex<0)
        {
            JOptionPane.showMessageDialog(this,"Please select the entry you wish to Update");
        }
        else
        {
            var patientId=(jRegisteredAppointmentTable.getValueAt(rowIndex, 0).toString());
            for (Patient patient : patients.getPatients()) {
                for (Map.Entry<Integer, EncounterHistory> pair : patient.getPatient().entrySet())
                {
                    if(pair.getKey()==Integer.parseInt(patientId))
                    {
                        check(patient);
                        return;
                }
                }
                
            }
            
    }//GEN-LAST:event_historyButtonActionPerformed
    }
private void check(Patient patient)
    {
        int key=0;
        String x="";
        EncounterHistory value=new  EncounterHistory();
        for(Map.Entry<Integer, EncounterHistory> patienEntry : patient.getPatient().entrySet())
        {
            key=patienEntry.getKey();
            value=patienEntry.getValue();
        }
        x=x+"Patient Id: "+key+""+System.lineSeparator()+System.lineSeparator();
        for(Encounter encounter:value.getPatientEncounterHistory())
        {
            for (Map.Entry<Date, VitalSigns> entry : encounter.getPatientEncounter().entrySet()) {
               x=x+"Doctor Visit Date: "+entry.getKey()+System.lineSeparator()+
                       "Blood Pressure: "+entry.getValue().getBloodPressure()+" "+ "Pulse Rate : "+entry.getValue().getPulseRate()+System.lineSeparator()
                       +"Test Taken Date: "+entry.getValue().getDateForTakingVitalSigns()+
                       System.lineSeparator()+System.lineSeparator();
            }
        }
        jTextArea1.setText(x);
    }
    private void displayInfo(Set<Patient> patients) {
        try{
        DefaultTableModel model =(DefaultTableModel) jRegisteredAppointmentTable.getModel();
        model.setRowCount(0);
        if(patients!=null && !patients.isEmpty())
        {
            patients.stream().map(patient -> {
                int patientId=0;
                String patientName="";
                Date appointmentDate=new Date();
                Map<String,Integer> recentVitalSigns=new HashMap<>();
                Date testUnderTakenDate=new Date();
                for (Map.Entry<Integer, EncounterHistory> pair : patient.getPatient().entrySet())
                {
                    patientId= pair.getKey();
                    for(Map.Entry<Date,VitalSigns> x : pair.getValue().getPatientEncounterHistory().get(pair.getValue().getPatientEncounterHistory().size()-1).getPatientEncounter().entrySet())
                    {
                        appointmentDate= x.getKey();
                        recentVitalSigns.put("Blood Pressure",  x.getValue().getBloodPressure());
                        recentVitalSigns.put("Pulse Rate",  x.getValue().getPulseRate());
                        testUnderTakenDate=x.getValue().getDateForTakingVitalSigns();
                    }
                }
                for(Person person:persons.getPersonDirectory())
                {
                    if(person.getPatientId()==(patientId))
                    {
                        patientName=person.getName();
                    }

                }
                model.addRow(new Object[]
                {patientId,patientName,appointmentDate,recentVitalSigns,testUnderTakenDate});
                return patient;
            }).forEachOrdered(_item -> {
                jRegisteredAppointmentTable.setModel(model);
            });
        }
        else{
             JOptionPane.showMessageDialog(this,"No Data to display");
             return;
        }
        }
        catch(Exception ex)
        {
            JOptionPane.showMessageDialog(this,"Please enter data before viewing");
        }

        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton historyButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTable jRegisteredAppointmentTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
