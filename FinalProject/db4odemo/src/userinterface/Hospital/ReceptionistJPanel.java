/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.Hospital;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EntryHospitalWorkRequest;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author Vijay
 */
public class ReceptionistJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ReceptionistJPanel
     */
     private final EcoSystem ecosystem;
     private String enterpriseName;private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
     int numberOfdoctorsAvailable=0;
     Boolean validationStatus=true;

     
    public ReceptionistJPanel(EcoSystem ecosystem) {
        initComponents();
        this.ecosystem=ecosystem;
        jPanel2.setVisible(false);
        jPanel3.setVisible(false);
        populateTable();
        populateDocCombobox();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtHeight = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        btnRegisterDetails = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jRegisterTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnRegisterDetails1 = new javax.swing.JButton();
        docComboBox = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(153, 0, 0));

        jPanel1.setBackground(new java.awt.Color(153, 0, 0));

        jLabel1.setBackground(new java.awt.Color(153, 0, 0));
        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RECEPTIONIST RECORD");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(153, 0, 0));

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Height:");

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Weight:");

        btnRegisterDetails.setBackground(new java.awt.Color(204, 204, 204));
        btnRegisterDetails.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        btnRegisterDetails.setText("RECORD DETAILS");
        btnRegisterDetails.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btnRegisterDetails.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRegisterDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(74, 74, 74)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                            .addComponent(txtHeight)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(btnRegisterDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(84, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(31, 31, 31)
                .addComponent(btnRegisterDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        jRegisterTable.setBackground(new java.awt.Color(204, 204, 204));
        jRegisterTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jRegisterTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jRegisterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Default", "Name", "Age", "Address", "Contact", "Height", "Weight"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jRegisterTable.setGridColor(new java.awt.Color(56, 90, 174));
        jRegisterTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        jRegisterTable.setSelectionBackground(new java.awt.Color(240, 178, 62));
        jRegisterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRegisterTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jRegisterTable);

        jPanel3.setBackground(new java.awt.Color(153, 0, 0));

        btnRegisterDetails1.setBackground(new java.awt.Color(204, 204, 204));
        btnRegisterDetails1.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        btnRegisterDetails1.setText("ASSIGN DOCTOR");
        btnRegisterDetails1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRegisterDetails1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterDetails1ActionPerformed(evt);
            }
        });

        docComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(docComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRegisterDetails1)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRegisterDetails1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(docComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 627, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 968, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(598, 598, 598))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(798, 798, 798))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(896, 896, 896))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(536, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisterDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterDetailsActionPerformed
        try{
        jPanel2.setVisible(true);
        jPanel3.setVisible(true);
        int rowNumber=jRegisterTable.getSelectedRow();
        EntryHospitalWorkRequest request=(EntryHospitalWorkRequest) jRegisterTable.getModel().getValueAt(rowNumber, 0);
        if(ecosystem.getWorkQueue()==null)
        {
            JOptionPane.showMessageDialog(null, "WorkQueue is empty");
                return;
        }
     for(EntryHospitalWorkRequest hospitalWorkRequest: ecosystem.getWorkQueue().getWorkRequestHospital() ){
         if(hospitalWorkRequest.equals(request)){
             if(!txtHeight.getText().matches("([0-9]*[.]*[0-9])"))
            {
            txtHeight.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtHeight.setToolTipText("Pleae enter only numbers/floating digits");
            validationStatus=false;
            }
            if(txtHeight.getText().matches("([0-9]*[.]*[0-9])"))
            {
            txtHeight.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
            }
            if(!txtWeight.getText().matches("([0-9]*[.]*[0-9])"))
            {
            txtWeight.setBorder(BorderFactory.createLineBorder(Color.RED, 1));
            txtWeight.setToolTipText("Pleae enter only numbers/floating digits");
            validationStatus=false;
            }
            if(txtWeight.getText().matches("([0-9]*[.]*[0-9])"))
            {
            txtWeight.setBorder(BorderFactory.createLineBorder(Color.GRAY, 1));
            }
             hospitalWorkRequest.setHeight(Double.parseDouble(txtHeight.getText()));
             hospitalWorkRequest.setWeight(Double.parseDouble(txtWeight.getText()));
         }
     }
        populateTable();
        jPanel2.setVisible(true);
        JOptionPane.showMessageDialog(null, "Parameters registered successfully");
        dB4OUtil.storeSystem(ecosystem);
        }
        catch(Exception ex)
        {
            throw ex;
        }
    }//GEN-LAST:event_btnRegisterDetailsActionPerformed

    private void jRegisterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRegisterTableMouseClicked

       try{
           int rowNumber=jRegisterTable.getSelectedRow();
           EntryHospitalWorkRequest request=(EntryHospitalWorkRequest) jRegisterTable.getModel().getValueAt(rowNumber, 0);
            if(request.getEntryChildWorkRequest()==null||request.getEntryChildWorkRequest().getPerson()==null){
                jPanel2.setVisible(false);
                jPanel3.setVisible(false);
                
            }
        else{
            jPanel2.setVisible(true);
            if(numberOfdoctorsAvailable>0)
            {
            jPanel3.setVisible(true);
            }
            else{
                JOptionPane.showMessageDialog(null, "Doctors not available to take appointment.Please try after some time");
            }
           txtHeight.setText(jRegisterTable.getModel().getValueAt(rowNumber, 5).toString());
           txtWeight.setText(jRegisterTable.getModel().getValueAt(rowNumber, 6).toString());
           }
        }
       catch(Exception e)
       {
           throw  e;
        }
            
    }//GEN-LAST:event_jRegisterTableMouseClicked

    private void btnRegisterDetails1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterDetails1ActionPerformed
       try {
                int rowNumber=jRegisterTable.getSelectedRow();
                if(rowNumber<0)
                {
                    JOptionPane.showMessageDialog(null, "Please select a row");
                    return;
                }
                String height=jRegisterTable.getModel().getValueAt(rowNumber, 5).toString();
                String weight= jRegisterTable.getModel().getValueAt(rowNumber, 6).toString();
                if(height.equals("0.0") || weight.equals("0.0"))
                {
                    JOptionPane.showMessageDialog(null, "Please Record the details before procedding");
                    return;
                }
                if(ecosystem.getWorkQueue()==null)
                {
                    JOptionPane.showMessageDialog(null, "WorkQueue is empty");
                        return;
                }
               ArrayList<EntryHospitalWorkRequest> workRequest= ecosystem.getWorkQueue().getWorkRequestHospital();
                for(EntryHospitalWorkRequest assignToHospitalWorkRequest:workRequest)
                {
                    if(assignToHospitalWorkRequest.equals(jRegisterTable.getModel().getValueAt(rowNumber, 0)))
                    {
                        if(!docComboBox.getSelectedItem().toString().isEmpty())
                        {
                         assignToHospitalWorkRequest.getHospital().getDoctor().setDoctorName(docComboBox.getSelectedItem().toString().split(",")[0]);
                         assignToHospitalWorkRequest.getHospital().getDoctor().setDoctorId(Integer.parseInt(docComboBox.getSelectedItem().toString().split(",")[1]));
                         assignToHospitalWorkRequest.getHospital().getDoctor().setDoctorAvailable(false);
                         assignToHospitalWorkRequest.getHospital().setAppointmentSentToDoctor(true);
                         assignToHospitalWorkRequest.setMedicalCheckupCompleted(false);
                         updateDoctorInfo(Integer.parseInt(docComboBox.getSelectedItem().toString().split(",")[1]));
                         JOptionPane.showMessageDialog(null, "Doctor Assigned Succesfully");
                         jPanel2.setVisible(false);
                         jPanel3.setVisible(false);
                         break;
                        
                        }
                        else{
                             JOptionPane.showMessageDialog(null, "Doctor is not available currently");
                              jPanel2.setVisible(false);
                         jPanel3.setVisible(false);
                            break;
                        }

                      }
                }
                dB4OUtil.storeSystem(ecosystem);
                populateTable();
                populateDocCombobox();
       }  
       catch(Exception e){
           throw e;
       }           
    }//GEN-LAST:event_btnRegisterDetails1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegisterDetails;
    private javax.swing.JButton btnRegisterDetails1;
    private javax.swing.JComboBox<String> docComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTable jRegisterTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtHeight;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables

    private void populateTable() {
        try{
        ArrayList<EntryHospitalWorkRequest> finalWorkRequests=new ArrayList<>();
        int loggedinID = ecosystem.getLogInUser().getLogInId();
         if(ecosystem.getWorkQueue()==null)
        {
            JOptionPane.showMessageDialog(null, "WorkQueue is empty");
                return;
        }
        for(EntryHospitalWorkRequest hospitalWorkRequest: ecosystem.getWorkQueue().getWorkRequestHospital())   
        {   
            for(Network network:ecosystem.getNetworks())
        {
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterprises())
            {
                if(enterprise.getEnterpriseType().equals("Hospital"))
                {
                    for(Organization organisation : enterprise.getOrganizationDirectory().getOrganisationList())
                    {
                       for(UserAccount userAccount : organisation.getUserAccountDirectory().getUserAccountList())
                       {
                           if(userAccount.getUniqueId()== loggedinID)
                           {
                                      
                              if(hospitalWorkRequest.getHospital().getHospitalName().equals(enterprise.getName()))
                                                  
                              {
                                  enterpriseName=enterprise.getName();
                                  if(hospitalWorkRequest.getEntryChildWorkRequest().isIsAccepted() && !hospitalWorkRequest.getHospital().isAppointmentSentToDoctor())
                                  {
                                       finalWorkRequests.add(hospitalWorkRequest);
                                  }
                              }
                           }
                       }
                    }
                }
            }
        }
            
        }
        DefaultTableModel model = (DefaultTableModel) jRegisterTable.getModel();
        model.setRowCount(0);
        jRegisterTable.getColumnModel().getColumn(0).setMinWidth(0);
        jRegisterTable.getColumnModel().getColumn(0).setMaxWidth(0);
        
        for(EntryHospitalWorkRequest requests : finalWorkRequests) //displaying on table from counsellor queue
        {
            Object[] row = new Object[7];
            row[0]=requests;
            row[1] = requests.getEntryChildWorkRequest().getPerson().getName();
            row[2] = requests.getEntryChildWorkRequest().getPerson().getAge();
            row[3] = requests.getEntryChildWorkRequest().getPerson().getAddress();
            row[4] = requests.getEntryChildWorkRequest().getPerson().getContact();         
            row[5] = requests.getHeight();
            row[6]= requests.getWeight();
            model.addRow(row);
        }
        }
        catch(Exception ex)
        {
            throw ex;
        }
    }

    private void populateDocCombobox() {
        try{
        docComboBox.removeAllItems();
        int loggedinID = ecosystem.getLogInUser().getLogInId();
        for(Network network: ecosystem.getNetworks())
        {
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterprises())
            {
                if(enterprise.getEnterpriseType().equals("Hospital") && enterprise.getName().equals(enterpriseName))
                {
                    for(Organization organization:enterprise.getOrganizationDirectory().getOrganisationList() )
                    {
                           for(UserAccount userAccount:organization.getUserAccountDirectory().getUserAccountList())
                           {
                               if(userAccount.getRole().toString().equals("Business.Role.DoctorRole") && userAccount.isIsAvailable() )
                               {
                                   numberOfdoctorsAvailable++;
                                   docComboBox.addItem(userAccount.getEmployee().getName()+","+userAccount.getUniqueId());
                               }
                           }
                    }
                }
            }
        }
        }
        catch(Exception ex)
        {
            throw ex;
        }
    }

    private void updateDoctorInfo(int doctorUniqueId) {
        try{
       for(Network network: ecosystem.getNetworks())
        {
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterprises())
            {
                if(enterprise.getEnterpriseType().equals("Hospital"))
                {
                    for(Organization organization:enterprise.getOrganizationDirectory().getOrganisationList() )
                    {
                           for(UserAccount userAccount:organization.getUserAccountDirectory().getUserAccountList())
                           {
                               if(userAccount.getUniqueId()==doctorUniqueId)
                               {
                                   userAccount.setIsAvailable(false);
                               }
                           }
                    }
                }
            }
        }
    }
      catch(Exception ex)
      {
          throw ex;
      }
    }
         
 }

