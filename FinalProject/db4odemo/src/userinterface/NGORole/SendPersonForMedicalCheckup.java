/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NGORole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Hospital.Hospital;
import Business.Network.Network;
import Business.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EntryChildWorkRequest;
import Business.WorkQueue.EntryHospitalWorkRequest;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vijay
 */
public class SendPersonForMedicalCheckup extends javax.swing.JPanel {

    /**
     * Creates new form SendPersonForMedicalCheckup
     */
     EcoSystem ecosystem;
     private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    public SendPersonForMedicalCheckup(EcoSystem ecosystem) {
        initComponents();
        this.ecosystem=ecosystem;
       jPanel2.setVisible(false);
        populate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jRegisterTable = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        btnSubmit = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setBackground(new java.awt.Color(240, 178, 62));
        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("STUDENT ADMITTED");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setOpaque(true);

        jRegisterTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jRegisterTable.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        jRegisterTable.setForeground(new java.awt.Color(56, 90, 174));
        jRegisterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Default", "Name", "Age", "Address", "Contact", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jRegisterTable.setGridColor(new java.awt.Color(56, 90, 174));
        jRegisterTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        jRegisterTable.setSelectionBackground(new java.awt.Color(240, 178, 62));
        jRegisterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRegisterTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jRegisterTable);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("AVAILABLE HOSPITALS:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSubmit.setBackground(new java.awt.Color(240, 178, 62));
        btnSubmit.setFont(new java.awt.Font("Arial Black", 1, 12)); // NOI18N
        btnSubmit.setForeground(new java.awt.Color(255, 255, 255));
        btnSubmit.setText("SUBMIT");
        btnSubmit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(48, 48, 48)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(btnSubmit)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1127, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(262, 262, 262)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(559, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jRegisterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRegisterTableMouseClicked

       try
       {
            int rowNumber=jRegisterTable.getSelectedRow();
           
        if(rowNumber<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
            if(jRegisterTable.getModel().getValueAt(rowNumber, 5).toString().equals("Scheduled"))
            {
                JOptionPane.showMessageDialog(null, "Appointment Already In Progress");
                return;
            }
            jPanel2.setVisible(true);
            populateComboBox();
       }     
        catch(Exception e)
        {
            throw  e;
        }
    }//GEN-LAST:event_jRegisterTableMouseClicked

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
      try{   
          int rowNumber=jRegisterTable.getSelectedRow();
            if(rowNumber<0)
            {
                    JOptionPane.showMessageDialog(null, "Please select a row");
                    return;
             }
         ArrayList<EntryHospitalWorkRequest> entryHospitals=ecosystem.getWorkQueue().getWorkRequestHospital();
                 
         EntryHospitalWorkRequest entryHospital = new EntryHospitalWorkRequest();
         for(EntryChildWorkRequest workRequest: ecosystem.getWorkQueue().getWorkRequestListNew()){
         if(workRequest.equals(jRegisterTable.getModel().getValueAt(rowNumber, 0)))
          {
          entryHospital.setEntryChildWorkRequest(workRequest);
          Hospital hospital = new Hospital();    
          if(!jComboBox1.getSelectedItem().toString().isEmpty())
          {
           hospital.setHospitalName(jComboBox1.getSelectedItem().toString());
           //hospital.setIsHospitalAvailable(false);
           hospital.setHospitalId(ecosystem.getLogInUser().getLogInId());
           entryHospital.setHospital(hospital);
           entryHospitals.add(entryHospital); 
            int loggedinID=ecosystem.getLogInUser().getLogInId();
            for(EntryChildWorkRequest entryChildWorkRequest: ecosystem.getWorkQueue().getWorkRequestListNew()){
                for(Network network:ecosystem.getNetworks())
                {
                    for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterprises())
                    {
                        if(enterprise.getEnterpriseType().equals("NGO"))
                        {
                            for(Organization organisation : enterprise.getOrganizationDirectory().getOrganisationList())
                            {
                               for(UserAccount userAccount : organisation.getUserAccountDirectory().getUserAccountList())
                               {
                                   if(userAccount.getUniqueId()== loggedinID)
                                   {
                                      if(entryChildWorkRequest.getNgoName().equals(enterprise.getName()))
                                      {
                                          entryChildWorkRequest.setHospitalAppointmentBooked(true);
                                          entryChildWorkRequest.setHospitalAppointmentBookingDate(new Date());
                                      }
                                   }
                               }
                            }
                        }
                    }
                }
            }
           JOptionPane.showMessageDialog(null, "Hospital has been assigned");
           jPanel2.setVisible(false);
          break;
       }
       else{       
             JOptionPane.showMessageDialog(null, "Hospital not Available Please Select a diffrent Hospital");
             break;
                        
       } 
      }
    }  
         dB4OUtil.storeSystem(ecosystem);
         populate();
      } 
      catch (Exception e) {
         throw e;
      }
    }//GEN-LAST:event_btnSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTable jRegisterTable;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    private void populate() {
       ArrayList<EntryChildWorkRequest> finalWorkRequests=new ArrayList<>();
       int loggedinID=ecosystem.getLogInUser().getLogInId();
        for(EntryChildWorkRequest workRequest: ecosystem.getWorkQueue().getWorkRequestListNew()){
        for(Network network:ecosystem.getNetworks())
        {
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterprises())
            {
                if(enterprise.getEnterpriseType().equals("NGO"))
                {
                    for(Organization organisation : enterprise.getOrganizationDirectory().getOrganisationList())
                    {
                       for(UserAccount userAccount : organisation.getUserAccountDirectory().getUserAccountList())
                       {
                           if(userAccount.getUniqueId()== loggedinID)
                           {
                              if(workRequest.getNgoName().equals(enterprise.getName()))
                              {
                                  if(workRequest.isIsAccepted())
                                  {
                                       finalWorkRequests.add(workRequest);
                                  }
                              }
                           }
                       }
                    }
                }
            
        }
        }
        DefaultTableModel model = (DefaultTableModel) jRegisterTable.getModel();
        model.setRowCount(0);
        jRegisterTable.getColumnModel().getColumn(0).setMinWidth(0);
        jRegisterTable.getColumnModel().getColumn(0).setMaxWidth(0);
        for(EntryChildWorkRequest requests : finalWorkRequests)
        {
            Object[] row = new Object[6];
            row[0]=requests;
            row[1] = requests.getPerson().getName();
            row[2] = requests.getPerson().getAge();
            row[3] = requests.getPerson().getAddress();
            row[4] = requests.getPerson().getContact();
            row[5] = requests.isHospitalAppointmentBooked()?"Scheduled":"Not Booked";
            model.addRow(row);
        }
    }
    }

  
    private void populateComboBox()
    {
        jPanel2.setVisible(true);
        jComboBox1.removeAllItems();  
        for(Network network : ecosystem.getNetworks())
        {
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterprises())
            {
                   String e = enterprise.getEnterpriseType();
                if(e.equals("Hospital")){
                    jComboBox1.addItem(enterprise.getName());
                }
            }
  
        }
    }

    private void updateHospitalInfo(int uniqueHospitalId) {
         for(Network network: ecosystem.getNetworks())
        {
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterprises())
            {   String e = enterprise.getEnterpriseType();
                if(e.equals("Hospital"))
                {
                    for(Organization organization:enterprise.getOrganizationDirectory().getOrganisationList() )
                    {
                           for(UserAccount userAccount:organization.getUserAccountDirectory().getUserAccountList())
                           {
                               if(userAccount.getUniqueId()==uniqueHospitalId)
                               {
                                   userAccount.setIsAvailable(false);
                               }
                           }
                    }
                }
            }
        }
    }
}
