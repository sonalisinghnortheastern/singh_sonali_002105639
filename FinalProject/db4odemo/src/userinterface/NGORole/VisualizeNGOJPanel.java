/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.NGORole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AssignToCollegeWorkRequest;
import Business.WorkQueue.AssignToCounsellorWorkRequest;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.HashMap;
import javax.swing.JOptionPane;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author Vijay
 */
public class VisualizeNGOJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AdmitPersonToNGOl
     */
    EcoSystem ecosystem;
    private String enterpriseName;
    public VisualizeNGOJPanel(EcoSystem ecosystem) {
        initComponents();
        this.ecosystem= ecosystem;
        populateData();
        showPieChart();
        showBarChart();
        showLineChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panelBarChart = new javax.swing.JPanel();
        panelBarChart1 = new javax.swing.JPanel();
        panelBarChart2 = new javax.swing.JPanel();

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jLabel1.setBackground(new java.awt.Color(240, 178, 62));
        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PICTORAL REPRESENTATION");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel1.setOpaque(true);

        panelBarChart.setLayout(new java.awt.BorderLayout());

        panelBarChart1.setLayout(new java.awt.BorderLayout());

        panelBarChart2.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1152, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(panelBarChart, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelBarChart1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addComponent(panelBarChart2, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelBarChart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelBarChart1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(panelBarChart2, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(110, 110, 110))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1127, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 950, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addGap(0, 156, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panelBarChart;
    private javax.swing.JPanel panelBarChart1;
    private javax.swing.JPanel panelBarChart2;
    // End of variables declaration//GEN-END:variables
public void showPieChart(){
     HashMap<String, Integer> studentToCounsellor = new HashMap<String, Integer>();
     DefaultPieDataset barDataset = new DefaultPieDataset( );
     int goGenius=0;
     int IDP=0;
     int others=0;
     if(ecosystem.getWorkQueue()==null)
            {
                JOptionPane.showMessageDialog(null, "WorkQueue is empty");
                    return;
            }
        for(AssignToCounsellorWorkRequest assignToCounsellorWorkRequest:ecosystem.getWorkQueue().getAssignToCounsellorWorkRequests())
        {
            if(assignToCounsellorWorkRequest.getEntryChildWorkRequest().getNgoName().equals(enterpriseName))
            {
                if(assignToCounsellorWorkRequest.getCounsellor().getCounsellingCompanyName().equalsIgnoreCase("Go Genius"))
                {
                    goGenius++;
                }
                if(assignToCounsellorWorkRequest.getCounsellor().getCounsellingCompanyName().equalsIgnoreCase("idp"))
                {
                    IDP++;
                }
                else{
                    others++;
                }
            }
        }
       
        studentToCounsellor.put("Go Genius", goGenius);
        studentToCounsellor.put("IDP", IDP);
        studentToCounsellor.put("Others", others);
        for (String i : studentToCounsellor.keySet()) {
      barDataset.setValue( i, studentToCounsellor.get(i) );  
    }
       JFreeChart piechart = ChartFactory.createPieChart("NUMBER OF STUDENTS SENT TO THE COUNSELLOR",barDataset, false,true,false);
      
        PiePlot piePlot =(PiePlot) piechart.getPlot();
       piePlot.setSectionPaint("Go Genius", new Color(255,255,102));
        piePlot.setSectionPaint("IDP", new Color(102,255,102));
        piePlot.setSectionPaint("Others", new Color(255,102,153));
        piePlot.setBackgroundPaint(Color.white);
        ChartPanel barChartPanel = new ChartPanel(piechart);
        panelBarChart.removeAll();
        panelBarChart.add(barChartPanel, BorderLayout.CENTER);
        panelBarChart.validate();
}
public void showBarChart(){
    HashMap<String, Integer> studentToCounsellor = new HashMap<String, Integer>();
     DefaultPieDataset barDataset = new DefaultPieDataset( );
     int vit=0;
     int galgotia=0;
     int others=0;
     if(ecosystem.getWorkQueue()==null)
            {
                JOptionPane.showMessageDialog(null, "WorkQueue is empty");
                    return;
            }
        for(AssignToCollegeWorkRequest assignToCollegeWorkRequest:ecosystem.getWorkQueue().getAssignToCollegeWorkRequests())
        {
            if(assignToCollegeWorkRequest.getAssignToCounsellorWorkRequest().getEntryChildWorkRequest().getNgoName().equals(enterpriseName))
            {
                if(assignToCollegeWorkRequest.getCollegeName().equalsIgnoreCase("vit") && assignToCollegeWorkRequest.isAcceptedByCollege())
                {
                    vit++;
                }
                if(assignToCollegeWorkRequest.getCollegeName().equalsIgnoreCase("galgotia")&& assignToCollegeWorkRequest.isAcceptedByCollege())
                {
                    galgotia++;
                }
                else{
                    others++;
                }
            }
        }
       
    DefaultCategoryDataset dataSet =new DefaultCategoryDataset();
    dataSet.setValue(vit,"Acceptance","VIT" );
    dataSet.setValue(galgotia,"Acceptance","Galgotia" );
    dataSet.setValue(others,"Acceptance","Other" );
    JFreeChart chart = ChartFactory.createBarChart("NUMBER OF STUDENTS ACCEPTED BY EACH COLLEGE","NUMBER OF STUDENTS","COLLEGE NAME", 
                dataSet, PlotOrientation.VERTICAL, false,true,false);
    CategoryPlot categoryPlot = chart.getCategoryPlot();
        categoryPlot.setBackgroundPaint(Color.WHITE);
        BarRenderer renderer = (BarRenderer) categoryPlot.getRenderer();
        Color clr3 = new Color(204,0,51);
        renderer.setSeriesPaint(0, clr3);
        
        ChartPanel barpChartPanel = new ChartPanel(chart);
        panelBarChart1.removeAll();
        panelBarChart1.add(barpChartPanel, BorderLayout.CENTER);
        panelBarChart1.validate();
}
    public void showLineChart(){
        //create dataset for the graph
         DefaultCategoryDataset dataset = new DefaultCategoryDataset();
         HashMap<String, Integer> studentToCounsellor = new HashMap<String, Integer>();
        int vit=0;
        int galgotia=0;
        int others=0;
        if(ecosystem.getWorkQueue()==null)
        {
            JOptionPane.showMessageDialog(null, "WorkQueue is empty");
                return;
        }
           for(AssignToCollegeWorkRequest assignToCollegeWorkRequest:ecosystem.getWorkQueue().getAssignToCollegeWorkRequests())
           {
               if(assignToCollegeWorkRequest.getAssignToCounsellorWorkRequest().getEntryChildWorkRequest().getNgoName().equals(enterpriseName))
               {
                   if(assignToCollegeWorkRequest.getCollegeName().equalsIgnoreCase("vit") && assignToCollegeWorkRequest.isAcceptedByCollege())
                   {
                       vit++;
                   }
                   if(assignToCollegeWorkRequest.getCollegeName().equalsIgnoreCase("galgotia")&& assignToCollegeWorkRequest.isAcceptedByCollege())
                   {
                       galgotia++;
                   }
                   else{
                       others++;
                   }
               }
           }
         
        dataset.setValue(200, "", "january");
        dataset.setValue(150, "Amount", "february");
        dataset.setValue(18, "Amount", "march");
        dataset.setValue(100, "Amount", "april");
        dataset.setValue(80, "Amount", "may");
        dataset.setValue(250, "Amount", "june");
        JFreeChart linechart = ChartFactory.createLineChart("NUMBER OF STUDENTS SENT TO HOSPITAL","HOSPITAL","NUMBER OF STUDENTS", 
                dataset, PlotOrientation.VERTICAL, false,true,false);
         CategoryPlot lineCategoryPlot = linechart.getCategoryPlot();
        lineCategoryPlot.setBackgroundPaint(Color.white);
        LineAndShapeRenderer lineRenderer = (LineAndShapeRenderer) lineCategoryPlot.getRenderer();
        Color lineChartColor = new Color(204,0,51);
        lineRenderer.setSeriesPaint(0, lineChartColor);
        ChartPanel lineChartPanel = new ChartPanel(linechart);
        panelBarChart2.removeAll();
        panelBarChart2.add(lineChartPanel, BorderLayout.CENTER);
        panelBarChart2.validate();
    }
    private void populateData()
    {
        for(Network network:ecosystem.getNetworks())
        {
            for(Enterprise enterprise:network.getEnterpriseDirectory().getEnterprises())
            {
                for(Organization organisation: enterprise.getOrganizationDirectory().getOrganisationList())
                {
                    for(UserAccount userAccount:organisation.getUserAccountDirectory().getUserAccountList())
                    {
                        if(userAccount.getUniqueId()==ecosystem.getLogInUser().getLogInId())
                        {
                            enterpriseName=enterprise.getName();
                        }
                    }   
                }
            }
        }
    }
}
