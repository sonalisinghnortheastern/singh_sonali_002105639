 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Role.OrganizationAdmin;
import Business.UserAccount.UserAccount;
import java.awt.Color;
import java.util.Properties;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author sonal
 */
public class ManageEnterpriseAdminJPanel extends javax.swing.JPanel {

    private final EcoSystem system;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    boolean validateNullOrEmpty=true;
    boolean validateRegex=true;
    boolean update=false;
    public ManageEnterpriseAdminJPanel(EcoSystem system) {
        initComponents();
        this.system = system;
        populateNetworkComboBox();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jRegisterTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnCreateEnterpriseAdmin = new javax.swing.JButton();
        btnModifyEnterpriseAdmin = new javax.swing.JButton();
        btnDeleteEnterpriseAdmin = new javax.swing.JButton();
        txtPassword = new javax.swing.JTextField();
        txtUsername = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        networkJComboBox = new javax.swing.JComboBox();
        enterpriseJComboBox = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(153, 0, 0));
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(2193, 1202));

        jRegisterTable.setBackground(new java.awt.Color(204, 204, 204));
        jRegisterTable.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jRegisterTable.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jRegisterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Default", "NETWORK NAME", "ENTERPRISE NAME", "NAME", "USERNAME", "PASSWORD"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jRegisterTable.setGridColor(new java.awt.Color(56, 90, 174));
        jRegisterTable.setIntercellSpacing(new java.awt.Dimension(5, 5));
        jRegisterTable.setSelectionBackground(new java.awt.Color(240, 178, 62));
        jRegisterTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRegisterTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jRegisterTable);
        if (jRegisterTable.getColumnModel().getColumnCount() > 0) {
            jRegisterTable.getColumnModel().getColumn(1).setResizable(false);
            jRegisterTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setBackground(new java.awt.Color(153, 0, 0));
        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Manage Enterprise Admin");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Username");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Password");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Network");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        btnCreateEnterpriseAdmin.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnCreateEnterpriseAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/add1.png"))); // NOI18N
        btnCreateEnterpriseAdmin.setText("Create");
        btnCreateEnterpriseAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateEnterpriseAdminActionPerformed(evt);
            }
        });

        btnModifyEnterpriseAdmin.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnModifyEnterpriseAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/edit1.png"))); // NOI18N
        btnModifyEnterpriseAdmin.setText("Modify");
        btnModifyEnterpriseAdmin.setHideActionText(true);
        btnModifyEnterpriseAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyEnterpriseAdminActionPerformed(evt);
            }
        });

        btnDeleteEnterpriseAdmin.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        btnDeleteEnterpriseAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/del.png"))); // NOI18N
        btnDeleteEnterpriseAdmin.setText("Delete ");
        btnDeleteEnterpriseAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteEnterpriseAdminActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Enterprise");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Name");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        networkJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        networkJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                networkJComboBoxActionPerformed(evt);
            }
        });

        enterpriseJComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(139, 139, 139))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(829, 829, 829)
                        .addComponent(btnCreateEnterpriseAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 86, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnModifyEnterpriseAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(txtName)
                        .addComponent(txtPassword)
                        .addComponent(networkJComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(enterpriseJComboBox, 0, 240, Short.MAX_VALUE)
                        .addComponent(txtUsername)))
                .addGap(864, 864, 864))
            .addGroup(layout.createSequentialGroup()
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDeleteEnterpriseAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1564, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCreateEnterpriseAdmin, btnModifyEnterpriseAdmin});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDeleteEnterpriseAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(networkJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(enterpriseJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnCreateEnterpriseAdmin)
                            .addComponent(btnModifyEnterpriseAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(427, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCreateEnterpriseAdmin, btnModifyEnterpriseAdmin});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtName, txtPassword, txtUsername});

    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateEnterpriseAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateEnterpriseAdminActionPerformed
    try{
    update=false;
    if(validateNullOrEmpty()){
    if(validateFields()){
    String name= txtName.getText();
    String username=txtUsername.getText();
    String password =txtPassword.getText();
    Enterprise enterprise = (Enterprise) enterpriseJComboBox.getSelectedItem();
    if(system.CheckIfUSernameIsUnique(username))
    {
        Random random=new Random();
        int uniqueId=random.nextInt((9999 - 100) + 1) + 10;
        Employee employee = enterprise.getEmployeeDirectory().createEmployee(name);
        UserAccount userAccount=new UserAccount();
        userAccount.setUsername(username);
        userAccount.setPassword(password);
        userAccount.setEmployee(employee);
        userAccount.setRole(new OrganizationAdmin());
        userAccount.setUniqueId(uniqueId);
        system.setUserAccounts(userAccount);
        enterprise.getUserAccountDirectory().addUserAccountToAccounts(userAccount);
        dB4OUtil.storeSystem(system);
        populateTable();
        try {
            sendEmail(username, password);
        } catch (Exception ex) {
            Logger.getLogger(ManageEnterpriseAdminJPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        JOptionPane.showMessageDialog(null, "Organisation Admin Created");
        reset();
    }
    else{
        JOptionPane.showMessageDialog(null, "Username already exist");
        return;
    }
       }
       else{
         JOptionPane.showMessageDialog(this, "Validation Failed .Please check the blue boxes");
         validateNullOrEmpty=true;
         validateRegex=true;
     }
        }
        else{
         JOptionPane.showMessageDialog(this, "Validation Failed .Please check the blue boxes");
         validateNullOrEmpty=true;
         validateRegex=true;
     }
    }
    catch(Exception ex)
    {
        validateNullOrEmpty=true;
        validateRegex=true;
        throw ex;
    }
    }//GEN-LAST:event_btnCreateEnterpriseAdminActionPerformed

    private void btnModifyEnterpriseAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyEnterpriseAdminActionPerformed
    try{
        update=false;
        int rowNumber=jRegisterTable.getSelectedRow();
        if(rowNumber<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        if(validateNullOrEmpty()){
        if(validateFields()){
        String name= txtName.getText();
        String username=txtUsername.getText();
        String password =txtPassword.getText();
        int uniqueId=(int) jRegisterTable.getModel().getValueAt(rowNumber, 0);
        
         for(Network networks : system.getNetworks())
         {
             for(Enterprise enterprises :networks.getEnterpriseDirectory().getEnterprises())
             {
                 for(UserAccount userAccount : enterprises.getUserAccountDirectory().getUserAccountList())
                 {
                     if(txtUsername.getText().equals(userAccount.getUsername()))
                    {
                        if(uniqueId != userAccount.getUniqueId())
                        {
                            System.out.println("Username already taken.Please take a diffrent username");
                            JOptionPane.showMessageDialog(this, "Username already taken.Please take a diffrent username");
                            return;
                        }
                    }
                 }
             }
         }
         system.getNetworks().forEach(networks -> {
             networks.getEnterpriseDirectory().getEnterprises().forEach(enterprises -> {
                 enterprises.getUserAccountDirectory().getUserAccountList().stream().filter(userAccount -> (uniqueId == userAccount.getUniqueId())).map(userAccount -> {
                     userAccount.setUsername(username);
                     return userAccount;
                 }).map(userAccount -> {
                     userAccount.setPassword(password);
                     return userAccount;
                 }).forEachOrdered(userAccount -> {
                     userAccount.getEmployee().setName(name);
                 });
            });
        });
         dB4OUtil.storeSystem(system);
         populateTable();
         reset();
         System.out.println("User modifed succesfully");
         JOptionPane.showMessageDialog(null, "User modifed succesfully");
    }
        else{
         JOptionPane.showMessageDialog(this, "Validation Failed .Please check the blue boxes");
         validateNullOrEmpty=true;
         validateRegex=true;
     }
        }
        else{
         JOptionPane.showMessageDialog(this, "Validation Failed .Please check the blue boxes");
         validateNullOrEmpty=true;
         validateRegex=true;
     }
        }
        
    catch(Exception e)
    {
        validateNullOrEmpty=true;
        validateRegex=true;
        throw e;
    }
    }//GEN-LAST:event_btnModifyEnterpriseAdminActionPerformed

    private void btnDeleteEnterpriseAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteEnterpriseAdminActionPerformed
    try{
        update=false;
        int selectedRowIndex=jRegisterTable.getSelectedRow();
        if(selectedRowIndex<0)
        {
            JOptionPane.showMessageDialog(null, "Please select a row");
            return;
        }
        else{
            int uniqueId= (int) jRegisterTable.getValueAt(selectedRowIndex, 0);
            for(Network network : system.getNetworks())
            {
                for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterprises())
                {
                    for(UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList())
                    {
                        if(userAccount.getUniqueId()== uniqueId)
                        {
                            enterprise.getUserAccountDirectory().getUserAccountList().remove(userAccount);
                            system.getUserAccounts().remove(userAccount);
                            break;
                        }
                    }
                }
            }
            dB4OUtil.storeSystem(system);
            populateTable();
            reset();
            populateNetworkComboBox();
            JOptionPane.showMessageDialog(null, "Admin Deleted Successfully");
            
        }
    }
    catch(Exception e)
    {
        throw e;
    }
       
    }//GEN-LAST:event_btnDeleteEnterpriseAdminActionPerformed

    private void jRegisterTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRegisterTableMouseClicked
        try{
           int rowNumber=jRegisterTable.getSelectedRow();
           Enterprise type=(Enterprise) jRegisterTable.getModel().getValueAt(rowNumber, 2);
           int size = enterpriseJComboBox.getItemCount();
            for (int i = 0; i < size; i++) {
              Enterprise item = (Enterprise) enterpriseJComboBox.getItemAt(i);
              if(item.equals(type))
            {
                  enterpriseJComboBox.setSelectedIndex(i);
                  update=true;
            }
            }
            txtName.setText(jRegisterTable.getModel().getValueAt(rowNumber, 3).toString());
            txtUsername.setText(jRegisterTable.getModel().getValueAt(rowNumber, 4).toString());
            txtPassword.setText(jRegisterTable.getModel().getValueAt(rowNumber, 5).toString());
             for(Network networks:system.getNetworks())
            {
                if(networks.getNetworkName().equals(jRegisterTable.getModel().getValueAt(rowNumber, 1).toString()))
                {
                    networkJComboBox.setSelectedItem(networks.getNetworkName());
                }
            }
       }
      catch(Exception e)
      {
          throw  e;
      }
    }//GEN-LAST:event_jRegisterTableMouseClicked

    private void networkJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_networkJComboBoxActionPerformed
        if(!update)
        {
             enterpriseJComboBox.removeAllItems();
        }
        Network network1=null;
        for (Network network : system.getNetworks()) {
            if(network.getNetworkName().equals((networkJComboBox.getSelectedItem())))
            {
              network1=network;
            }
        }
        if(network1!=null && !update)
        {
            for(Enterprise enterprise:network1.getEnterpriseDirectory().getEnterprises())
        {
            enterpriseJComboBox.addItem(enterprise);
        }
        }
    }//GEN-LAST:event_networkJComboBoxActionPerformed
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) jRegisterTable.getModel();
        model.setRowCount(0);
        jRegisterTable.getColumnModel().getColumn(0).setMinWidth(0);
        jRegisterTable.getColumnModel().getColumn(0).setMaxWidth(0);
        for(Network network : system.getNetworks())
        {
            for(Enterprise enterprise : network.getEnterpriseDirectory().getEnterprises())
            {
                for(UserAccount userAccount : enterprise.getUserAccountDirectory().getUserAccountList())
                {
                    Object[] row = new Object[6];
                    row[0]=userAccount.getUniqueId();
                    row[1] = network.getNetworkName();
                    row[2] = enterprise;
                    row[3] = userAccount.getEmployee().getName();
                    row[4] = userAccount.getUsername();
                    row[5] = userAccount.getPassword();
                    model.addRow(row);
                }
            }
        }

    }
    private void reset() {
        try{
            txtName.setText("");
            txtUsername.setText("");
            txtPassword.setText("");
            networkJComboBox.setSelectedIndex(0);
            enterpriseJComboBox.setSelectedIndex(0);
        }
        catch(Exception ex)
        {
            throw  ex;
        }
        }
    private void populateNetworkComboBox() {
        networkJComboBox.removeAllItems();
       for(Network network: system.getNetworks())
       {
           networkJComboBox.addItem(network.getNetworkName());
       }
    }
    private void sendEmail(String toEmailAddress,String password) throws Exception
    {
       String toEmail=toEmailAddress;
       String fromEmail="huskydevportal@gmail.com";
       String fromEmailPassword="Husky@123";
       String message= "You have been registered on the Foster Care portal with "+toEmailAddress +" username and "+password +" password";
       String subject= "Registration Successful";
       Properties properties=new Properties();
       properties.put("mail.smtp.auth", true);
       properties.put("mail.smtp.starttls.enable", true);
       properties.put("mail.smtp.host", "smtp.gmail.com");
       properties.put("mail.smtp.port", 587);
        Session session = Session.getDefaultInstance(properties,new javax.mail.Authenticator() {
        protected PasswordAuthentication getPasswordAuthentication(){
        return new PasswordAuthentication(fromEmail,fromEmailPassword);

        }
        });

        try{
        //
        MimeMessage mimeMessage = new MimeMessage(session);
        mimeMessage.setFrom(new InternetAddress(fromEmail));
        mimeMessage.addRecipient(Message.RecipientType.TO, new InternetAddress(toEmail));
        mimeMessage.setSubject(subject);
        mimeMessage.setText(message);
        Transport.send(mimeMessage);
        }
        catch(Exception e){
            throw  e;
        }
    }
    private  boolean validateNullOrEmpty(){
         validateNullOrEmpty=true;
         if(txtName.getText().trim().isEmpty() || txtName.getText()==null){
             validateNullOrEmpty=false;
            txtName.setToolTipText("Please Enter a Name");
            txtName.setBorder(BorderFactory.createLineBorder(Color.BLUE,1));
         }
          if(!txtName.getText().trim().isEmpty() && txtName.getText()!=null){
            txtName.setBorder(UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border"));
         }
          
          if(txtUsername.getText().trim().isEmpty() || txtUsername.getText()==null){
             validateNullOrEmpty=false;
            txtUsername.setToolTipText("Please Enter a Valid Email ID");
            txtUsername.setBorder(BorderFactory.createLineBorder(Color.BLUE,1));
         } 
           if(!txtUsername.getText().trim().isEmpty() && txtUsername.getText()!=null){
            txtUsername.setBorder(UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border"));
         }
         
         if(txtPassword.getText().trim().isEmpty() || txtPassword.getText()==null){
             validateNullOrEmpty=false;
            txtPassword.setToolTipText("Please Enter a Password");
            txtPassword.setBorder(BorderFactory.createLineBorder(Color.BLUE,1));
         } 
          if(!txtPassword.getText().trim().isEmpty() && txtPassword.getText()!=null){
            txtPassword.setBorder(UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border"));
         }
          
          return  validateNullOrEmpty;
     }
    private  boolean  validateFields()
    {
        validateRegex=true;
        
        if(!txtUsername.getText().matches("^(.+)@(.+)$")){
            validateRegex=false;
            txtUsername.setToolTipText("Please Enter A Valid Email Address");
            txtName.setBorder(UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border"));
            txtUsername.setBorder(BorderFactory.createLineBorder (Color.BLUE));
        }
        
        if(txtUsername.getText().matches("^(.+)@(.+)$")){
           txtUsername.setBorder(UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border"));
        }

       if(!txtPassword.getText().matches("((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])|(?=.*[\\d~!@#$%^&*\\(\\)_+\\{\\}\\[\\]\\?<>|_]).{6,50})")){
            validateRegex=false;
            txtPassword.setToolTipText("Please Enter A Valid Password [minimum 8-digit with one letter, one number, and one special character");
            txtPassword.setBorder(BorderFactory.createLineBorder (Color.BLUE));
        }
        
        if(txtPassword.getText().matches("((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])|(?=.*[\\d~!@#$%^&*\\(\\)_+\\{\\}\\[\\]\\?<>|_]).{6,50})")){
           txtPassword.setBorder(UIManager.getLookAndFeel().getDefaults().getBorder("TextField.border"));
        }
        
        return validateRegex;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateEnterpriseAdmin;
    private javax.swing.JButton btnDeleteEnterpriseAdmin;
    private javax.swing.JButton btnModifyEnterpriseAdmin;
    private javax.swing.JComboBox enterpriseJComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTable jRegisterTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox networkJComboBox;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
